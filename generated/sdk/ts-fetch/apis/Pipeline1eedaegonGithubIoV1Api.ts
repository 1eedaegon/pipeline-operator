/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IoGithub1eedaegonPipelineV1Pipeline,
  IoGithub1eedaegonPipelineV1PipelineList,
  IoGithub1eedaegonPipelineV1Run,
  IoGithub1eedaegonPipelineV1RunList,
  IoGithub1eedaegonPipelineV1Task,
  IoGithub1eedaegonPipelineV1TaskList,
  IoK8sApimachineryPkgApisMetaV1Status,
} from '../models/index';
import {
    IoGithub1eedaegonPipelineV1PipelineFromJSON,
    IoGithub1eedaegonPipelineV1PipelineToJSON,
    IoGithub1eedaegonPipelineV1PipelineListFromJSON,
    IoGithub1eedaegonPipelineV1PipelineListToJSON,
    IoGithub1eedaegonPipelineV1RunFromJSON,
    IoGithub1eedaegonPipelineV1RunToJSON,
    IoGithub1eedaegonPipelineV1RunListFromJSON,
    IoGithub1eedaegonPipelineV1RunListToJSON,
    IoGithub1eedaegonPipelineV1TaskFromJSON,
    IoGithub1eedaegonPipelineV1TaskToJSON,
    IoGithub1eedaegonPipelineV1TaskListFromJSON,
    IoGithub1eedaegonPipelineV1TaskListToJSON,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
} from '../models/index';

export interface CreatePipeline1eedaegonGithubIoV1NamespacedPipelineRequest {
    body: IoGithub1eedaegonPipelineV1Pipeline;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface CreatePipeline1eedaegonGithubIoV1NamespacedRunRequest {
    body: IoGithub1eedaegonPipelineV1Run;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface CreatePipeline1eedaegonGithubIoV1NamespacedTaskRequest {
    body: IoGithub1eedaegonPipelineV1Task;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface DeletePipeline1eedaegonGithubIoV1CollectionNamespacedPipelineRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
    UNKNOWN_PARAMETER_NAME12?: ;
}

export interface DeletePipeline1eedaegonGithubIoV1CollectionNamespacedRunRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
    UNKNOWN_PARAMETER_NAME12?: ;
}

export interface DeletePipeline1eedaegonGithubIoV1CollectionNamespacedTaskRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
    UNKNOWN_PARAMETER_NAME12?: ;
}

export interface DeletePipeline1eedaegonGithubIoV1NamespacedPipelineRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
}

export interface DeletePipeline1eedaegonGithubIoV1NamespacedRunRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
}

export interface DeletePipeline1eedaegonGithubIoV1NamespacedTaskRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
}

export interface ListPipeline1eedaegonGithubIoV1NamespacedPipelineRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
    UNKNOWN_PARAMETER_NAME12?: ;
}

export interface ListPipeline1eedaegonGithubIoV1NamespacedRunRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
    UNKNOWN_PARAMETER_NAME12?: ;
}

export interface ListPipeline1eedaegonGithubIoV1NamespacedTaskRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
    UNKNOWN_PARAMETER_NAME12?: ;
}

export interface ListPipeline1eedaegonGithubIoV1PipelineForAllNamespacesRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
}

export interface ListPipeline1eedaegonGithubIoV1RunForAllNamespacesRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
}

export interface ListPipeline1eedaegonGithubIoV1TaskForAllNamespacesRequest {
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    UNKNOWN_PARAMETER_NAME4?: ;
    UNKNOWN_PARAMETER_NAME5?: ;
    UNKNOWN_PARAMETER_NAME6?: ;
    UNKNOWN_PARAMETER_NAME7?: ;
    UNKNOWN_PARAMETER_NAME8?: ;
    UNKNOWN_PARAMETER_NAME9?: ;
    UNKNOWN_PARAMETER_NAME10?: ;
    UNKNOWN_PARAMETER_NAME11?: ;
}

export interface PatchPipeline1eedaegonGithubIoV1NamespacedPipelineRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    fieldValidation?: string;
    UNKNOWN_PARAMETER_NAME5?: ;
}

export interface PatchPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    fieldValidation?: string;
    UNKNOWN_PARAMETER_NAME5?: ;
}

export interface PatchPipeline1eedaegonGithubIoV1NamespacedRunRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    fieldValidation?: string;
    UNKNOWN_PARAMETER_NAME5?: ;
}

export interface PatchPipeline1eedaegonGithubIoV1NamespacedRunStatusRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    fieldValidation?: string;
    UNKNOWN_PARAMETER_NAME5?: ;
}

export interface PatchPipeline1eedaegonGithubIoV1NamespacedTaskRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    fieldValidation?: string;
    UNKNOWN_PARAMETER_NAME5?: ;
}

export interface PatchPipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME4?: ;
    fieldValidation?: string;
    UNKNOWN_PARAMETER_NAME5?: ;
}

export interface ReadPipeline1eedaegonGithubIoV1NamespacedPipelineRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
}

export interface ReadPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
}

export interface ReadPipeline1eedaegonGithubIoV1NamespacedRunRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
}

export interface ReadPipeline1eedaegonGithubIoV1NamespacedRunStatusRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
}

export interface ReadPipeline1eedaegonGithubIoV1NamespacedTaskRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
}

export interface ReadPipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest {
    name: string;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    UNKNOWN_PARAMETER_NAME3?: ;
}

export interface ReplacePipeline1eedaegonGithubIoV1NamespacedPipelineRequest {
    name: string;
    body: IoGithub1eedaegonPipelineV1Pipeline;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface ReplacePipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest {
    name: string;
    body: IoGithub1eedaegonPipelineV1Pipeline;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface ReplacePipeline1eedaegonGithubIoV1NamespacedRunRequest {
    name: string;
    body: IoGithub1eedaegonPipelineV1Run;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface ReplacePipeline1eedaegonGithubIoV1NamespacedRunStatusRequest {
    name: string;
    body: IoGithub1eedaegonPipelineV1Run;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface ReplacePipeline1eedaegonGithubIoV1NamespacedTaskRequest {
    name: string;
    body: IoGithub1eedaegonPipelineV1Task;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

export interface ReplacePipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest {
    name: string;
    body: IoGithub1eedaegonPipelineV1Task;
    UNKNOWN_PARAMETER_NAME?: ;
    UNKNOWN_PARAMETER_NAME2?: ;
    dryRun?: string;
    UNKNOWN_PARAMETER_NAME3?: ;
    fieldValidation?: string;
}

/**
 * 
 */
export class Pipeline1eedaegonGithubIoV1Api extends runtime.BaseAPI {

    /**
     * create a Pipeline
     */
    async createPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters: CreatePipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPipeline1eedaegonGithubIoV1NamespacedPipeline().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1PipelineToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * create a Pipeline
     */
    async createPipeline1eedaegonGithubIoV1NamespacedPipeline(requestParameters: CreatePipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.createPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a Run
     */
    async createPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters: CreatePipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPipeline1eedaegonGithubIoV1NamespacedRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1RunToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * create a Run
     */
    async createPipeline1eedaegonGithubIoV1NamespacedRun(requestParameters: CreatePipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.createPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a Task
     */
    async createPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters: CreatePipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createPipeline1eedaegonGithubIoV1NamespacedTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1TaskToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * create a Task
     */
    async createPipeline1eedaegonGithubIoV1NamespacedTask(requestParameters: CreatePipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.createPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Pipeline
     */
    async deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipelineRaw(requestParameters: DeletePipeline1eedaegonGithubIoV1CollectionNamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Pipeline
     */
    async deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(requestParameters: DeletePipeline1eedaegonGithubIoV1CollectionNamespacedPipelineRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Run
     */
    async deletePipeline1eedaegonGithubIoV1CollectionNamespacedRunRaw(requestParameters: DeletePipeline1eedaegonGithubIoV1CollectionNamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Run
     */
    async deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(requestParameters: DeletePipeline1eedaegonGithubIoV1CollectionNamespacedRunRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePipeline1eedaegonGithubIoV1CollectionNamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of Task
     */
    async deletePipeline1eedaegonGithubIoV1CollectionNamespacedTaskRaw(requestParameters: DeletePipeline1eedaegonGithubIoV1CollectionNamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Task
     */
    async deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(requestParameters: DeletePipeline1eedaegonGithubIoV1CollectionNamespacedTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePipeline1eedaegonGithubIoV1CollectionNamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Pipeline
     */
    async deletePipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters: DeletePipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deletePipeline1eedaegonGithubIoV1NamespacedPipeline().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Pipeline
     */
    async deletePipeline1eedaegonGithubIoV1NamespacedPipeline(requestParameters: DeletePipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Run
     */
    async deletePipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters: DeletePipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deletePipeline1eedaegonGithubIoV1NamespacedRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Run
     */
    async deletePipeline1eedaegonGithubIoV1NamespacedRun(requestParameters: DeletePipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a Task
     */
    async deletePipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters: DeletePipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deletePipeline1eedaegonGithubIoV1NamespacedTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Task
     */
    async deletePipeline1eedaegonGithubIoV1NamespacedTask(requestParameters: DeletePipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deletePipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list objects of kind Pipeline
     */
    async listPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters: ListPipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1PipelineList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineListFromJSON(jsonValue));
    }

    /**
     * list objects of kind Pipeline
     */
    async listPipeline1eedaegonGithubIoV1NamespacedPipeline(requestParameters: ListPipeline1eedaegonGithubIoV1NamespacedPipelineRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1PipelineList> {
        const response = await this.listPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list objects of kind Run
     */
    async listPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters: ListPipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1RunList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunListFromJSON(jsonValue));
    }

    /**
     * list objects of kind Run
     */
    async listPipeline1eedaegonGithubIoV1NamespacedRun(requestParameters: ListPipeline1eedaegonGithubIoV1NamespacedRunRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1RunList> {
        const response = await this.listPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list objects of kind Task
     */
    async listPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters: ListPipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1TaskList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskListFromJSON(jsonValue));
    }

    /**
     * list objects of kind Task
     */
    async listPipeline1eedaegonGithubIoV1NamespacedTask(requestParameters: ListPipeline1eedaegonGithubIoV1NamespacedTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1TaskList> {
        const response = await this.listPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list objects of kind Pipeline
     */
    async listPipeline1eedaegonGithubIoV1PipelineForAllNamespacesRaw(requestParameters: ListPipeline1eedaegonGithubIoV1PipelineForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1PipelineList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/pipelines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineListFromJSON(jsonValue));
    }

    /**
     * list objects of kind Pipeline
     */
    async listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(requestParameters: ListPipeline1eedaegonGithubIoV1PipelineForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1PipelineList> {
        const response = await this.listPipeline1eedaegonGithubIoV1PipelineForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list objects of kind Run
     */
    async listPipeline1eedaegonGithubIoV1RunForAllNamespacesRaw(requestParameters: ListPipeline1eedaegonGithubIoV1RunForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1RunList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/runs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunListFromJSON(jsonValue));
    }

    /**
     * list objects of kind Run
     */
    async listPipeline1eedaegonGithubIoV1RunForAllNamespaces(requestParameters: ListPipeline1eedaegonGithubIoV1RunForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1RunList> {
        const response = await this.listPipeline1eedaegonGithubIoV1RunForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list objects of kind Task
     */
    async listPipeline1eedaegonGithubIoV1TaskForAllNamespacesRaw(requestParameters: ListPipeline1eedaegonGithubIoV1TaskForAllNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1TaskList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskListFromJSON(jsonValue));
    }

    /**
     * list objects of kind Task
     */
    async listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(requestParameters: ListPipeline1eedaegonGithubIoV1TaskForAllNamespacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1TaskList> {
        const response = await this.listPipeline1eedaegonGithubIoV1TaskForAllNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Pipeline
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPipeline1eedaegonGithubIoV1NamespacedPipeline().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * partially update the specified Pipeline
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedPipeline(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.patchPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Pipeline
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRaw(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Pipeline
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Run
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPipeline1eedaegonGithubIoV1NamespacedRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * partially update the specified Run
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedRun(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.patchPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Run
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedRunStatusRaw(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPipeline1eedaegonGithubIoV1NamespacedRunStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Run
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.patchPipeline1eedaegonGithubIoV1NamespacedRunStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified Task
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPipeline1eedaegonGithubIoV1NamespacedTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * partially update the specified Task
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedTask(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.patchPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified Task
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedTaskStatusRaw(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Task
     */
    async patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(requestParameters: PatchPipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.patchPipeline1eedaegonGithubIoV1NamespacedTaskStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Pipeline
     */
    async readPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPipeline1eedaegonGithubIoV1NamespacedPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * read the specified Pipeline
     */
    async readPipeline1eedaegonGithubIoV1NamespacedPipeline(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.readPipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Pipeline
     */
    async readPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRaw(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * read status of the specified Pipeline
     */
    async readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.readPipeline1eedaegonGithubIoV1NamespacedPipelineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Run
     */
    async readPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPipeline1eedaegonGithubIoV1NamespacedRun().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * read the specified Run
     */
    async readPipeline1eedaegonGithubIoV1NamespacedRun(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.readPipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Run
     */
    async readPipeline1eedaegonGithubIoV1NamespacedRunStatusRaw(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPipeline1eedaegonGithubIoV1NamespacedRunStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * read status of the specified Run
     */
    async readPipeline1eedaegonGithubIoV1NamespacedRunStatus(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.readPipeline1eedaegonGithubIoV1NamespacedRunStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified Task
     */
    async readPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPipeline1eedaegonGithubIoV1NamespacedTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * read the specified Task
     */
    async readPipeline1eedaegonGithubIoV1NamespacedTask(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.readPipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified Task
     */
    async readPipeline1eedaegonGithubIoV1NamespacedTaskStatusRaw(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling readPipeline1eedaegonGithubIoV1NamespacedTaskStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * read status of the specified Task
     */
    async readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(requestParameters: ReadPipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.readPipeline1eedaegonGithubIoV1NamespacedTaskStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Pipeline
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedPipeline().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedPipeline().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1PipelineToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * replace the specified Pipeline
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedPipeline(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.replacePipeline1eedaegonGithubIoV1NamespacedPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Pipeline
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatusRaw(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Pipeline>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1PipelineToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1PipelineFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Pipeline
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedPipelineStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Pipeline> {
        const response = await this.replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Run
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedRun().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1RunToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * replace the specified Run
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedRun(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.replacePipeline1eedaegonGithubIoV1NamespacedRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Run
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedRunStatusRaw(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Run>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedRunStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedRunStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1RunToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1RunFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Run
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Run> {
        const response = await this.replacePipeline1eedaegonGithubIoV1NamespacedRunStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified Task
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedTask().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1TaskToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * replace the specified Task
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedTask(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.replacePipeline1eedaegonGithubIoV1NamespacedTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified Task
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedTaskStatusRaw(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoGithub1eedaegonPipelineV1Task>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dryRun'] != null) {
            queryParameters['dryRun'] = requestParameters['dryRun'];
        }

        if (requestParameters['fieldValidation'] != null) {
            queryParameters['fieldValidation'] = requestParameters['fieldValidation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = await this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoGithub1eedaegonPipelineV1TaskToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoGithub1eedaegonPipelineV1TaskFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Task
     */
    async replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(requestParameters: ReplacePipeline1eedaegonGithubIoV1NamespacedTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoGithub1eedaegonPipelineV1Task> {
        const response = await this.replacePipeline1eedaegonGithubIoV1NamespacedTaskStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
