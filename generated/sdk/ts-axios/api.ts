/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.30.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1Pipeline
 */
export interface IoGithub1eedaegonPipelineV1Pipeline {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1Pipeline
     */
    'apiVersion'?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1Pipeline
     */
    'kind'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoGithub1eedaegonPipelineV1Pipeline
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpec}
     * @memberof IoGithub1eedaegonPipelineV1Pipeline
     */
    'spec'?: IoGithub1eedaegonPipelineV1PipelineSpec;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineStatus}
     * @memberof IoGithub1eedaegonPipelineV1Pipeline
     */
    'status'?: IoGithub1eedaegonPipelineV1PipelineStatus;
}
/**
 * PipelineList is a list of Pipeline
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineList
 */
export interface IoGithub1eedaegonPipelineV1PipelineList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineList
     */
    'apiVersion'?: string;
    /**
     * List of pipelines. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
     * @type {Array<IoGithub1eedaegonPipelineV1Pipeline>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineList
     */
    'items': Array<IoGithub1eedaegonPipelineV1Pipeline>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineList
     */
    'kind'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoGithub1eedaegonPipelineV1PipelineList
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpec
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpec {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'additionalContainerSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'additionalPodSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'env'?: { [key: string]: string; };
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'historyLimit'?: IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'inputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'outputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecResource}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'resource'?: IoGithub1eedaegonPipelineV1PipelineSpecResource;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'runBefore'?: Array<string>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecSchedule}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'schedule'?: IoGithub1eedaegonPipelineV1PipelineSpecSchedule;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecTasksInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'tasks'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecTasksInner>;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'trigger'?: boolean;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpec
     */
    'volumes'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'args'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'command'?: Array<string>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'env'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'envFrom'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'imagePullPolicy'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'lifecycle'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'livenessProbe'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'name': string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'ports'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'readinessProbe'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'resizePolicy'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'resources'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'restartPolicy'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'securityContext'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'startupProbe'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'stdin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'stdinOnce'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'terminationMessagePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'terminationMessagePolicy'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'tty'?: boolean;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'volumeDevices'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'volumeMounts'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs
     */
    'workingDir'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner
     */
    'configMapRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner
     */
    'prefix'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInnerConfigMapRef
     */
    'optional'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner
     */
    'value'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner
     */
    'valueFrom'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom
     */
    'configMapKeyRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom
     */
    'fieldRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom
     */
    'resourceFieldRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFrom
     */
    'secretKeyRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromConfigMapKeyRef
     */
    'optional'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef
     */
    'apiVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef
     */
    'fieldPath': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef
     */
    'containerName'?: string;
    /**
     * 
     * @type {object}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef
     */
    'divisor'?: object;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef
     */
    'resource': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle
     */
    'postStart'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle
     */
    'preStop'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart
     */
    'exec'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart
     */
    'httpGet'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartSleep}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart
     */
    'sleep'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartSleep;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStart
     */
    'tcpSocket'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec
     */
    'command'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet
     */
    'host'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet
     */
    'httpHeaders'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet
     */
    'path'?: string;
    /**
     * 
     * @type {object}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet
     */
    'port': object;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet
     */
    'scheme'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartSleep
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartSleep {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartSleep
     */
    'seconds': number;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket
     */
    'host'?: string;
    /**
     * 
     * @type {object}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket
     */
    'port': object;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'exec'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartExec;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'failureThreshold'?: number;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbeGrpc}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'grpc'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbeGrpc;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'httpGet'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGet;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'initialDelaySeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'periodSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'successThreshold'?: number;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'tcpSocket'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartTcpSocket;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'terminationGracePeriodSeconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe
     */
    'timeoutSeconds'?: number;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbeGrpc
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbeGrpc {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbeGrpc
     */
    'port': number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbeGrpc
     */
    'service'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner
     */
    'containerPort': number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner
     */
    'hostIP'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner
     */
    'hostPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner
     */
    'protocol'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner
     */
    'resourceName': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner
     */
    'restartPolicy': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources
     */
    'claims'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources
     */
    'limits'?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources
     */
    'requests'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext {
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'allowPrivilegeEscalation'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextCapabilities}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'capabilities'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextCapabilities;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'privileged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'procMount'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'readOnlyRootFilesystem'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'runAsGroup'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'runAsNonRoot'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'runAsUser'?: number;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'seLinuxOptions'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'seccompProfile'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext
     */
    'windowsOptions'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextCapabilities
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextCapabilities {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextCapabilities
     */
    'add'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextCapabilities
     */
    'drop'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions
     */
    'level'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile
     */
    'localhostProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions
     */
    'gmsaCredentialSpec'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions
     */
    'gmsaCredentialSpecName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions
     */
    'hostProcess'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions
     */
    'runAsUserName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner
     */
    'devicePath': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
     */
    'mountPath': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
     */
    'mountPropagation'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
     */
    'subPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner
     */
    'subPathExpr'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'activeDeadlineSeconds'?: number;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'affinity'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'automountServiceAccountToken'?: boolean;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'containers': Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'dnsConfig'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'dnsPolicy'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'enableServiceLinks'?: boolean;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'ephemeralContainers'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsHostAliasesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'hostAliases'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsHostAliasesInner>;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'hostIPC'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'hostNetwork'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'hostPID'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'hostUsers'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'hostname'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'imagePullSecrets'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'initContainers'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'nodeName'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'nodeSelector'?: { [key: string]: string; };
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'os'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'overhead'?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'preemptionPolicy'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'priorityClassName'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsReadinessGatesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'readinessGates'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsReadinessGatesInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'resourceClaims'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'restartPolicy'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'runtimeClassName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'schedulerName'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'schedulingGates'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResourcesClaimsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'securityContext'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'serviceAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'serviceAccountName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'setHostnameAsFQDN'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'shareProcessNamespace'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'subdomain'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'terminationGracePeriodSeconds'?: number;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'tolerations'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'topologySpreadConstraints'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs
     */
    'volumes'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinity}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity
     */
    'nodeAffinity'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinity;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity
     */
    'podAffinity'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinity
     */
    'podAntiAffinity'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinity
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinity {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinity
     */
    'preferredDuringSchedulingIgnoredDuringExecution'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinity
     */
    'requiredDuringSchedulingIgnoredDuringExecution'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner
     */
    'preference': IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner
     */
    'weight': number;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference
     */
    'matchExpressions'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference
     */
    'matchFields'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner
     */
    'operator': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
     */
    'nodeSelectorTerms': Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreference>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity
     */
    'preferredDuringSchedulingIgnoredDuringExecution'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinity
     */
    'requiredDuringSchedulingIgnoredDuringExecution'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner
     */
    'podAffinityTerm': IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInner
     */
    'weight': number;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
     */
    'labelSelector'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
     */
    'matchLabelKeys'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
     */
    'mismatchLabelKeys'?: Array<string>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
     */
    'namespaceSelector'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
     */
    'namespaces'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTerm
     */
    'topologyKey': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector
     */
    'matchExpressions'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPreferenceMatchExpressionsInner>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector
     */
    'matchLabels'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig
     */
    'nameservers'?: Array<string>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfigOptionsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig
     */
    'options'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfigOptionsInner>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfig
     */
    'searches'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfigOptionsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfigOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfigOptionsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsDnsConfigOptionsInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'args'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'command'?: Array<string>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'env'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'envFrom'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvFromInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'imagePullPolicy'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'lifecycle'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecycle;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'livenessProbe'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'name': string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'ports'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsPortsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'readinessProbe'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'resizePolicy'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResizePolicyInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'resources'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsResources;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'restartPolicy'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'securityContext'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContext;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'startupProbe'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLivenessProbe;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'stdin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'stdinOnce'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'targetContainerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'terminationMessagePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'terminationMessagePolicy'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'tty'?: boolean;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'volumeDevices'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeDevicesInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'volumeMounts'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsVolumeMountsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsEphemeralContainersInner
     */
    'workingDir'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsHostAliasesInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsHostAliasesInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsHostAliasesInner
     */
    'hostnames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsHostAliasesInner
     */
    'ip'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsReadinessGatesInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsReadinessGatesInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsReadinessGatesInner
     */
    'conditionType': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInner
     */
    'name': string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInnerSource}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInner
     */
    'source'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInnerSource;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInnerSource
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInnerSource {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInnerSource
     */
    'resourceClaimName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsResourceClaimsInnerSource
     */
    'resourceClaimTemplateName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'fsGroup'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'fsGroupChangePolicy'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'runAsGroup'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'runAsNonRoot'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'runAsUser'?: number;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'seLinuxOptions'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeLinuxOptions;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'seccompProfile'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextSeccompProfile;
    /**
     * 
     * @type {Array<number>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'supplementalGroups'?: Array<number>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'sysctls'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsLifecyclePostStartHttpGetHttpHeadersInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsSecurityContext
     */
    'windowsOptions'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsSecurityContextWindowsOptions;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner
     */
    'effect'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner
     */
    'operator'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner
     */
    'tolerationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTolerationsInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'labelSelector'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'matchLabelKeys'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'maxSkew': number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'minDomains'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'nodeAffinityPolicy'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'nodeTaintsPolicy'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'topologyKey': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsTopologySpreadConstraintsInner
     */
    'whenUnsatisfiable': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'awsElasticBlockStore'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'azureDisk'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'azureFile'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'cephfs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'cinder'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'configMap'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'csi'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPI}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'downwardAPI'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPI;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEmptyDir}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'emptyDir'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEmptyDir;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeral}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'ephemeral'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeral;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'fc'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'flexVolume'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlocker}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'flocker'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlocker;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'gcePersistentDisk'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'gitRepo'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'glusterfs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerHostPath}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'hostPath'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerHostPath;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'iscsi'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'name': string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'nfs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPersistentVolumeClaim}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'persistentVolumeClaim'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPersistentVolumeClaim;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPhotonPersistentDisk}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'photonPersistentDisk'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPhotonPersistentDisk;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'portworxVolume'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjected}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'projected'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjected;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'quobyte'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'rbd'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'scaleIO'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'secret'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'storageos'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInner
     */
    'vsphereVolume'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore
     */
    'fsType'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore
     */
    'partition'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAwsElasticBlockStore
     */
    'volumeID': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
     */
    'cachingMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
     */
    'diskName': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
     */
    'diskURI': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
     */
    'fsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
     */
    'kind'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureDisk
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile {
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile
     */
    'secretName': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerAzureFile
     */
    'shareName': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
     */
    'monitors': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
     */
    'path'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
     */
    'secretFile'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCephfs
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder
     */
    'fsType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCinder
     */
    'volumeID': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap
     */
    'defaultMode'?: number;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap
     */
    'items'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMap
     */
    'optional'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner
     */
    'key': string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner
     */
    'mode'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi
     */
    'driver': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi
     */
    'fsType'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi
     */
    'nodePublishSecretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerCsi
     */
    'volumeAttributes'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPI
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPI {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPI
     */
    'defaultMode'?: number;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPI
     */
    'items'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner
     */
    'fieldRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromFieldRef;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner
     */
    'mode'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner
     */
    'path': string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner
     */
    'resourceFieldRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecsEnvInnerValueFromResourceFieldRef;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEmptyDir
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEmptyDir {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEmptyDir
     */
    'medium'?: string;
    /**
     * 
     * @type {object}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEmptyDir
     */
    'sizeLimit'?: object;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeral
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeral {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplate}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeral
     */
    'volumeClaimTemplate'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplate;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplate
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplate {
    /**
     * 
     * @type {object}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplate
     */
    'metadata'?: object;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplate
     */
    'spec': IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'accessModes'?: Array<string>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'dataSource'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'dataSourceRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecResources}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'resources'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecResources;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'selector'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'storageClassName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'volumeAttributesClassName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'volumeMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpec
     */
    'volumeName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource
     */
    'apiGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource
     */
    'kind': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSource
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef
     */
    'apiGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef
     */
    'kind': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecDataSourceRef
     */
    'namespace'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecResources
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecResources {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecResources
     */
    'limits'?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerEphemeralVolumeClaimTemplateSpecResources
     */
    'requests'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc
     */
    'fsType'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc
     */
    'lun'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc
     */
    'targetWWNs'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFc
     */
    'wwids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume
     */
    'driver': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume
     */
    'fsType'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume
     */
    'options'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlexVolume
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlocker
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlocker {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlocker
     */
    'datasetName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerFlocker
     */
    'datasetUUID'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk
     */
    'fsType'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk
     */
    'partition'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk
     */
    'pdName': string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGcePersistentDisk
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo
     */
    'directory'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo
     */
    'repository': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGitRepo
     */
    'revision'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs
     */
    'endpoints': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs
     */
    'path': string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerGlusterfs
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerHostPath
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerHostPath {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerHostPath
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerHostPath
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi {
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'chapAuthDiscovery'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'chapAuthSession'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'fsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'initiatorName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'iqn': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'iscsiInterface'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'lun': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'portals'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerIscsi
     */
    'targetPortal': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs
     */
    'path': string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerNfs
     */
    'server': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPersistentVolumeClaim
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPersistentVolumeClaim {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPersistentVolumeClaim
     */
    'claimName': string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPersistentVolumeClaim
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPhotonPersistentDisk
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPhotonPersistentDisk {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPhotonPersistentDisk
     */
    'fsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPhotonPersistentDisk
     */
    'pdID': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume
     */
    'fsType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerPortworxVolume
     */
    'volumeID': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjected
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjected {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjected
     */
    'defaultMode'?: number;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjected
     */
    'sources'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner
     */
    'clusterTrustBundle'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner
     */
    'configMap'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerDownwardAPI}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner
     */
    'downwardAPI'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerDownwardAPI;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner
     */
    'secret'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInner
     */
    'serviceAccountToken'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle
     */
    'labelSelector'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionInnerPodAffinityTermLabelSelector;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle
     */
    'optional'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerClusterTrustBundle
     */
    'signerName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap
     */
    'items'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerConfigMap
     */
    'optional'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerDownwardAPI
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerDownwardAPI {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerDownwardAPI
     */
    'items'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerDownwardAPIItemsInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken
     */
    'audience'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken
     */
    'expirationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerProjectedSourcesInnerServiceAccountToken
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
     */
    'group'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
     */
    'registry': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
     */
    'tenant'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerQuobyte
     */
    'volume': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'fsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'keyring'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'monitors': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'pool'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerRbd
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'fsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'gateway': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'protectionDomain'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'secretRef': IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'sslEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'storageMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'storagePool'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'system': string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerScaleIO
     */
    'volumeName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret
     */
    'defaultMode'?: number;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret
     */
    'items'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerConfigMapItemsInner>;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret
     */
    'optional'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerSecret
     */
    'secretName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos
     */
    'fsType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos
     */
    'secretRef'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsImagePullSecretsInner;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos
     */
    'volumeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerStorageos
     */
    'volumeNamespace'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume
     */
    'fsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume
     */
    'storagePolicyID'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume
     */
    'storagePolicyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecsVolumesInnerVsphereVolume
     */
    'volumePath': string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecInputsInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecInputsInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecInputsInner
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecInputsInner
     */
    'useIntermediateDirectory'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecResource
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecResource {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecResource
     */
    'cpu'?: string;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecResourceGpu}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecResource
     */
    'gpu'?: IoGithub1eedaegonPipelineV1PipelineSpecResourceGpu;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecResource
     */
    'memory'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecResourceGpu
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecResourceGpu {
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecResourceGpu
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecResourceGpu
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecSchedule
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecSchedule {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecSchedule
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecSchedule
     */
    'scheduleDate'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecTasksInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'additionalContainerSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'additionalPodSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'args'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'command'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'env'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'image'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'inputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'name'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'outputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecResource}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'resource'?: IoGithub1eedaegonPipelineV1PipelineSpecResource;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'runBefore'?: Array<string>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecSchedule}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'schedule'?: IoGithub1eedaegonPipelineV1PipelineSpecSchedule;
    /**
     * 
     * @type {boolean}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecTasksInner
     */
    'trigger'?: boolean;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner
 */
export interface IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner
     */
    'capacity'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner
     */
    'storage'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1PipelineStatus
 */
export interface IoGithub1eedaegonPipelineV1PipelineStatus {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineStatus
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1PipelineStatus
     */
    'lastUpdatedDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1PipelineStatus
     */
    'runs'?: number;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1Run
 */
export interface IoGithub1eedaegonPipelineV1Run {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1Run
     */
    'apiVersion'?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1Run
     */
    'kind'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoGithub1eedaegonPipelineV1Run
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1RunSpec}
     * @memberof IoGithub1eedaegonPipelineV1Run
     */
    'spec'?: IoGithub1eedaegonPipelineV1RunSpec;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1RunStatus}
     * @memberof IoGithub1eedaegonPipelineV1Run
     */
    'status'?: IoGithub1eedaegonPipelineV1RunStatus;
}
/**
 * RunList is a list of Run
 * @export
 * @interface IoGithub1eedaegonPipelineV1RunList
 */
export interface IoGithub1eedaegonPipelineV1RunList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunList
     */
    'apiVersion'?: string;
    /**
     * List of runs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
     * @type {Array<IoGithub1eedaegonPipelineV1Run>}
     * @memberof IoGithub1eedaegonPipelineV1RunList
     */
    'items': Array<IoGithub1eedaegonPipelineV1Run>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunList
     */
    'kind'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoGithub1eedaegonPipelineV1RunList
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1RunSpec
 */
export interface IoGithub1eedaegonPipelineV1RunSpec {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'additionalContainerSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'additionalPodSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'env'?: { [key: string]: string; };
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'historyLimit'?: IoGithub1eedaegonPipelineV1PipelineSpecHistoryLimit;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'inputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1RunSpecJobsInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'jobs'?: Array<IoGithub1eedaegonPipelineV1RunSpecJobsInner>;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'outputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecResource}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'resource'?: IoGithub1eedaegonPipelineV1PipelineSpecResource;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'runBefore'?: Array<string>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecSchedule}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'schedule'?: IoGithub1eedaegonPipelineV1PipelineSpecSchedule;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'trigger'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpec
     */
    'volumes'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecVolumesInner>;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1RunSpecJobsInner
 */
export interface IoGithub1eedaegonPipelineV1RunSpecJobsInner {
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'additionalContainerSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalContainerSpecs;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'additionalPodSpecs'?: IoGithub1eedaegonPipelineV1PipelineSpecAdditionalPodSpecs;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'args'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'command'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'env'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'image'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'inputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'namespace'?: string;
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'outputs'?: Array<IoGithub1eedaegonPipelineV1PipelineSpecInputsInner>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecResource}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'resource'?: IoGithub1eedaegonPipelineV1PipelineSpecResource;
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'runBefore'?: Array<string>;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1PipelineSpecSchedule}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'schedule'?: IoGithub1eedaegonPipelineV1PipelineSpecSchedule;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunSpecJobsInner
     */
    'trigger'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1RunStatus
 */
export interface IoGithub1eedaegonPipelineV1RunStatus {
    /**
     * 
     * @type {Array<IoGithub1eedaegonPipelineV1RunStatusJobStatesInner>}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'JobStates'?: Array<IoGithub1eedaegonPipelineV1RunStatusJobStatesInner>;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'completed'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'createdDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'deleted'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'deleting'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'failed'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'initializing'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'lastUpdateDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'runState'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'running'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'stopping'?: number;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1RunStatus
     */
    'waiting'?: number;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1RunStatusJobStatesInner
 */
export interface IoGithub1eedaegonPipelineV1RunStatusJobStatesInner {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatusJobStatesInner
     */
    'jobState'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatusJobStatesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatusJobStatesInner
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1RunStatusJobStatesInner
     */
    'runJobName'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1Task
 */
export interface IoGithub1eedaegonPipelineV1Task {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1Task
     */
    'apiVersion'?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1Task
     */
    'kind'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ObjectMeta}
     * @memberof IoGithub1eedaegonPipelineV1Task
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ObjectMeta;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1TaskSpec}
     * @memberof IoGithub1eedaegonPipelineV1Task
     */
    'spec'?: IoGithub1eedaegonPipelineV1TaskSpec;
    /**
     * 
     * @type {IoGithub1eedaegonPipelineV1TaskStatus}
     * @memberof IoGithub1eedaegonPipelineV1Task
     */
    'status'?: IoGithub1eedaegonPipelineV1TaskStatus;
}
/**
 * TaskList is a list of Task
 * @export
 * @interface IoGithub1eedaegonPipelineV1TaskList
 */
export interface IoGithub1eedaegonPipelineV1TaskList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskList
     */
    'apiVersion'?: string;
    /**
     * List of tasks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
     * @type {Array<IoGithub1eedaegonPipelineV1Task>}
     * @memberof IoGithub1eedaegonPipelineV1TaskList
     */
    'items': Array<IoGithub1eedaegonPipelineV1Task>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskList
     */
    'kind'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoGithub1eedaegonPipelineV1TaskList
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1TaskSpec
 */
export interface IoGithub1eedaegonPipelineV1TaskSpec {
    /**
     * 
     * @type {Array<string>}
     * @memberof IoGithub1eedaegonPipelineV1TaskSpec
     */
    'args'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskSpec
     */
    'command'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskSpec
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskSpec
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface IoGithub1eedaegonPipelineV1TaskStatus
 */
export interface IoGithub1eedaegonPipelineV1TaskStatus {
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskStatus
     */
    'createdDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof IoGithub1eedaegonPipelineV1TaskStatus
     */
    'jobs'?: number;
    /**
     * 
     * @type {string}
     * @memberof IoGithub1eedaegonPipelineV1TaskStatus
     */
    'lastUpdatedDate'?: string;
}
/**
 * APIGroup contains the name, the supported versions, and the preferred version of a group.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1APIGroup
 */
export interface IoK8sApimachineryPkgApisMetaV1APIGroup {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroup
     */
    'apiVersion'?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroup
     */
    'kind'?: string;
    /**
     * name is the name of the group.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroup
     */
    'name': string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroup
     */
    'preferredVersion'?: IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery;
    /**
     * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroup
     */
    'serverAddressByClientCIDRs'?: Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>;
    /**
     * versions are the versions supported in this group.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroup
     */
    'versions': Array<IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery>;
}
/**
 * APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1APIGroupList
 */
export interface IoK8sApimachineryPkgApisMetaV1APIGroupList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroupList
     */
    'apiVersion'?: string;
    /**
     * groups is a list of APIGroup.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1APIGroup>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroupList
     */
    'groups': Array<IoK8sApimachineryPkgApisMetaV1APIGroup>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIGroupList
     */
    'kind'?: string;
}
/**
 * APIResource specifies the name of a resource and whether it is namespaced.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1APIResource
 */
export interface IoK8sApimachineryPkgApisMetaV1APIResource {
    /**
     * categories is a list of the grouped resources this resource belongs to (e.g. \'all\')
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'categories'?: Array<string>;
    /**
     * group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'group'?: string;
    /**
     * kind is the kind for the resource (e.g. \'Foo\' is the kind for a resource \'foo\')
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'kind': string;
    /**
     * name is the plural name of the resource.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'name': string;
    /**
     * namespaced indicates if a resource is namespaced or not.
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'namespaced': boolean;
    /**
     * shortNames is a list of suggested short names of the resource.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'shortNames'?: Array<string>;
    /**
     * singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'singularName': string;
    /**
     * The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'storageVersionHash'?: string;
    /**
     * verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'verbs': Array<string>;
    /**
     * version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource\'s group)\".
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResource
     */
    'version'?: string;
}
/**
 * APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1APIResourceList
 */
export interface IoK8sApimachineryPkgApisMetaV1APIResourceList {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResourceList
     */
    'apiVersion'?: string;
    /**
     * groupVersion is the group and version this APIResourceList is for.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResourceList
     */
    'groupVersion': string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResourceList
     */
    'kind'?: string;
    /**
     * resources contains the name of the resources and if they are namespaced.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1APIResource>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIResourceList
     */
    'resources': Array<IoK8sApimachineryPkgApisMetaV1APIResource>;
}
/**
 * APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1APIVersions
 */
export interface IoK8sApimachineryPkgApisMetaV1APIVersions {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIVersions
     */
    'apiVersion'?: string;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIVersions
     */
    'kind'?: string;
    /**
     * a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIVersions
     */
    'serverAddressByClientCIDRs': Array<IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR>;
    /**
     * versions are the api versions that are available.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1APIVersions
     */
    'versions': Array<string>;
}
/**
 * Condition contains details for one aspect of the current state of this API Resource.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1Condition
 */
export interface IoK8sApimachineryPkgApisMetaV1Condition {
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Condition
     */
    'lastTransitionTime': string;
    /**
     * message is a human readable message indicating details about the transition. This may be an empty string.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Condition
     */
    'message': string;
    /**
     * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1Condition
     */
    'observedGeneration'?: number;
    /**
     * reason contains a programmatic identifier indicating the reason for the condition\'s last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Condition
     */
    'reason': string;
    /**
     * status of the condition, one of True, False, Unknown.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Condition
     */
    'status': string;
    /**
     * type of condition in CamelCase or in foo.example.com/CamelCase.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Condition
     */
    'type': string;
}
/**
 * DeleteOptions may be provided when deleting an API object.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1DeleteOptions
 */
export interface IoK8sApimachineryPkgApisMetaV1DeleteOptions {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'apiVersion'?: string;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'dryRun'?: Array<string>;
    /**
     * The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'gracePeriodSeconds'?: number;
    /**
     * if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'ignoreStoreReadErrorWithClusterBreakingPotential'?: boolean;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'kind'?: string;
    /**
     * Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object\'s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'orphanDependents'?: boolean;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1Preconditions}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'preconditions'?: IoK8sApimachineryPkgApisMetaV1Preconditions;
    /**
     * Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \'Orphan\' - orphan the dependents; \'Background\' - allow the garbage collector to delete the dependents in the background; \'Foreground\' - a cascading policy that deletes all dependents in the foreground.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1DeleteOptions
     */
    'propagationPolicy'?: string;
}
/**
 * FieldSelectorRequirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement
 */
export interface IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement {
    /**
     * key is the field selector key that the requirement applies to.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement
     */
    'key': string;
    /**
     * operator represents a key\'s relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement
     */
    'operator': string;
    /**
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1FieldSelectorRequirement
     */
    'values'?: Array<string>;
}
/**
 * GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
 */
export interface IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
    /**
     * groupVersion specifies the API group and version in the form \"group/version\"
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
     */
    'groupVersion': string;
    /**
     * version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
     */
    'version': string;
}
/**
 * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1LabelSelector
 */
export interface IoK8sApimachineryPkgApisMetaV1LabelSelector {
    /**
     * matchExpressions is a list of label selector requirements. The requirements are ANDed.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement>}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelector
     */
    'matchExpressions'?: Array<IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement>;
    /**
     * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelector
     */
    'matchLabels'?: { [key: string]: string; };
}
/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
 */
export interface IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
    /**
     * key is the label key that the selector applies to.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
     */
    'key': string;
    /**
     * operator represents a key\'s relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
     */
    'operator': string;
    /**
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement
     */
    'values'?: Array<string>;
}
/**
 * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ListMeta
 */
export interface IoK8sApimachineryPkgApisMetaV1ListMeta {
    /**
     * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    'continue'?: string;
    /**
     * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    'remainingItemCount'?: number;
    /**
     * String that identifies the server\'s internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    'resourceVersion'?: string;
    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ListMeta
     */
    'selfLink'?: string;
}
/**
 * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
 */
export interface IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry {
    /**
     * APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'apiVersion'?: string;
    /**
     * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'fieldsType'?: string;
    /**
     * FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.  Each key is either a \'.\' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: \'f:<name>\', where <name> is the name of a field in a struct, or key in a map \'v:<value>\', where <value> is the exact json formatted value of a list item \'i:<index>\', where <index> is position of a item in a list \'k:<keys>\', where <keys> is a map of  a list item\'s key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.  The exact format is defined in sigs.k8s.io/structured-merge-diff
     * @type {object}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'fieldsV1'?: object;
    /**
     * Manager is an identifier of the workflow managing these fields.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'manager'?: string;
    /**
     * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are \'Apply\' and \'Update\'.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'operation'?: string;
    /**
     * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'subresource'?: string;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry
     */
    'time'?: string;
}
/**
 * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ObjectMeta
 */
export interface IoK8sApimachineryPkgApisMetaV1ObjectMeta {
    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'annotations'?: { [key: string]: string; };
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'creationTimestamp'?: string;
    /**
     * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'deletionGracePeriodSeconds'?: number;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'deletionTimestamp'?: string;
    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
     * @type {Array<string>}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'finalizers'?: Array<string>;
    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will return a 409.  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'generateName'?: string;
    /**
     * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'generation'?: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'labels'?: { [key: string]: string; };
    /**
     * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn\'t need to set or understand this field. A workflow can be the user\'s name, a controller\'s name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry>}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'managedFields'?: Array<IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry>;
    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'name'?: string;
    /**
     * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'namespace'?: string;
    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'ownerReferences'?: Array<IoK8sApimachineryPkgApisMetaV1OwnerReference>;
    /**
     * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'resourceVersion'?: string;
    /**
     * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'selfLink'?: string;
    /**
     * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ObjectMeta
     */
    'uid'?: string;
}
/**
 * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1OwnerReference
 */
export interface IoK8sApimachineryPkgApisMetaV1OwnerReference {
    /**
     * API version of the referent.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    'apiVersion': string;
    /**
     * If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    'blockOwnerDeletion'?: boolean;
    /**
     * If true, this reference points to the managing controller.
     * @type {boolean}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    'controller'?: boolean;
    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    'kind': string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    'name': string;
    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1OwnerReference
     */
    'uid': string;
}
/**
 * Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1Preconditions
 */
export interface IoK8sApimachineryPkgApisMetaV1Preconditions {
    /**
     * Specifies the target ResourceVersion
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Preconditions
     */
    'resourceVersion'?: string;
    /**
     * Specifies the target UID.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Preconditions
     */
    'uid'?: string;
}
/**
 * ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
 */
export interface IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR {
    /**
     * The CIDR with which clients can match their IP to figure out the server address that they should use.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
     */
    'clientCIDR': string;
    /**
     * Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR
     */
    'serverAddress': string;
}
/**
 * Status is a return value for calls that don\'t return other objects.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1Status
 */
export interface IoK8sApimachineryPkgApisMetaV1Status {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'apiVersion'?: string;
    /**
     * Suggested HTTP return code for this status, 0 if not set.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'code'?: number;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1StatusDetails}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'details'?: IoK8sApimachineryPkgApisMetaV1StatusDetails;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'kind'?: string;
    /**
     * A human-readable description of the status of this operation.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'message'?: string;
    /**
     * 
     * @type {IoK8sApimachineryPkgApisMetaV1ListMeta}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'metadata'?: IoK8sApimachineryPkgApisMetaV1ListMeta;
    /**
     * A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'reason'?: string;
    /**
     * Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1Status
     */
    'status'?: string;
}
/**
 * StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1StatusCause
 */
export interface IoK8sApimachineryPkgApisMetaV1StatusCause {
    /**
     * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.  Examples:   \"name\" - the field \"name\" on the current resource   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusCause
     */
    'field'?: string;
    /**
     * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusCause
     */
    'message'?: string;
    /**
     * A machine-readable description of the cause of the error. If this value is empty there is no information available.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusCause
     */
    'reason'?: string;
}
/**
 * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1StatusDetails
 */
export interface IoK8sApimachineryPkgApisMetaV1StatusDetails {
    /**
     * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1StatusCause>}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusDetails
     */
    'causes'?: Array<IoK8sApimachineryPkgApisMetaV1StatusCause>;
    /**
     * The group attribute of the resource associated with the status StatusReason.
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusDetails
     */
    'group'?: string;
    /**
     * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusDetails
     */
    'kind'?: string;
    /**
     * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusDetails
     */
    'name'?: string;
    /**
     * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
     * @type {number}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusDetails
     */
    'retryAfterSeconds'?: number;
    /**
     * UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1StatusDetails
     */
    'uid'?: string;
}
/**
 * Event represents a single event to a watched resource.
 * @export
 * @interface IoK8sApimachineryPkgApisMetaV1WatchEvent
 */
export interface IoK8sApimachineryPkgApisMetaV1WatchEvent {
    /**
     * RawExtension is used to hold extensions in external versions.  To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.  // Internal package:   type MyAPIObject struct {   runtime.TypeMeta `json:\",inline\"`   MyPlugin runtime.Object `json:\"myPlugin\"`  }   type PluginA struct {   AOption string `json:\"aOption\"`  }  // External package:   type MyAPIObject struct {   runtime.TypeMeta `json:\",inline\"`   MyPlugin runtime.RawExtension `json:\"myPlugin\"`  }   type PluginA struct {   AOption string `json:\"aOption\"`  }  // On the wire, the JSON will look something like this:   {   \"kind\":\"MyAPIObject\",   \"apiVersion\":\"v1\",   \"myPlugin\": {    \"kind\":\"PluginA\",    \"aOption\":\"foo\",   },  }  So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package\'s DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
     * @type {object}
     * @memberof IoK8sApimachineryPkgApisMetaV1WatchEvent
     */
    'object': object;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgApisMetaV1WatchEvent
     */
    'type': string;
}
/**
 * Info contains versioning information. how we\'ll want to distribute that information.
 * @export
 * @interface IoK8sApimachineryPkgVersionInfo
 */
export interface IoK8sApimachineryPkgVersionInfo {
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'buildDate': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'compiler': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'gitCommit': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'gitTreeState': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'gitVersion': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'goVersion': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'major': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'minor': string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    'platform': string;
}

/**
 * Pipeline1eedaegonGithubIoV1Api - axios parameter creator
 * @export
 */
export const Pipeline1eedaegonGithubIoV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create a Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline1eedaegonGithubIoV1NamespacedPipeline: async (namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('createPipeline1eedaegonGithubIoV1NamespacedPipeline', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPipeline1eedaegonGithubIoV1NamespacedPipeline', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline1eedaegonGithubIoV1NamespacedRun: async (namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('createPipeline1eedaegonGithubIoV1NamespacedRun', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPipeline1eedaegonGithubIoV1NamespacedRun', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline1eedaegonGithubIoV1NamespacedTask: async (namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('createPipeline1eedaegonGithubIoV1NamespacedTask', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPipeline1eedaegonGithubIoV1NamespacedTask', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete collection of Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline: async (namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete collection of Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun: async (namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete collection of Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask: async (namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete a Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1NamespacedPipeline: async (name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1NamespacedPipeline', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1NamespacedPipeline', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (gracePeriodSeconds !== undefined) {
                localVarQueryParameter['gracePeriodSeconds'] = gracePeriodSeconds;
            }

            if (ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
                localVarQueryParameter['ignoreStoreReadErrorWithClusterBreakingPotential'] = ignoreStoreReadErrorWithClusterBreakingPotential;
            }

            if (orphanDependents !== undefined) {
                localVarQueryParameter['orphanDependents'] = orphanDependents;
            }

            if (propagationPolicy !== undefined) {
                localVarQueryParameter['propagationPolicy'] = propagationPolicy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete a Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1NamespacedRun: async (name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1NamespacedRun', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1NamespacedRun', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (gracePeriodSeconds !== undefined) {
                localVarQueryParameter['gracePeriodSeconds'] = gracePeriodSeconds;
            }

            if (ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
                localVarQueryParameter['ignoreStoreReadErrorWithClusterBreakingPotential'] = ignoreStoreReadErrorWithClusterBreakingPotential;
            }

            if (orphanDependents !== undefined) {
                localVarQueryParameter['orphanDependents'] = orphanDependents;
            }

            if (propagationPolicy !== undefined) {
                localVarQueryParameter['propagationPolicy'] = propagationPolicy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete a Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1NamespacedTask: async (name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1NamespacedTask', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('deletePipeline1eedaegonGithubIoV1NamespacedTask', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (gracePeriodSeconds !== undefined) {
                localVarQueryParameter['gracePeriodSeconds'] = gracePeriodSeconds;
            }

            if (ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
                localVarQueryParameter['ignoreStoreReadErrorWithClusterBreakingPotential'] = ignoreStoreReadErrorWithClusterBreakingPotential;
            }

            if (orphanDependents !== undefined) {
                localVarQueryParameter['orphanDependents'] = orphanDependents;
            }

            if (propagationPolicy !== undefined) {
                localVarQueryParameter['propagationPolicy'] = propagationPolicy;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list objects of kind Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1NamespacedPipeline: async (namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('listPipeline1eedaegonGithubIoV1NamespacedPipeline', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list objects of kind Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1NamespacedRun: async (namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('listPipeline1eedaegonGithubIoV1NamespacedRun', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list objects of kind Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1NamespacedTask: async (namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('listPipeline1eedaegonGithubIoV1NamespacedTask', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks`
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list objects of kind Pipeline
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces: async (allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list objects of kind Run
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1RunForAllNamespaces: async (allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/runs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * list objects of kind Task
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1TaskForAllNamespaces: async (allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (allowWatchBookmarks !== undefined) {
                localVarQueryParameter['allowWatchBookmarks'] = allowWatchBookmarks;
            }

            if (_continue !== undefined) {
                localVarQueryParameter['continue'] = _continue;
            }

            if (fieldSelector !== undefined) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (labelSelector !== undefined) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }

            if (resourceVersionMatch !== undefined) {
                localVarQueryParameter['resourceVersionMatch'] = resourceVersionMatch;
            }

            if (sendInitialEvents !== undefined) {
                localVarQueryParameter['sendInitialEvents'] = sendInitialEvents;
            }

            if (timeoutSeconds !== undefined) {
                localVarQueryParameter['timeoutSeconds'] = timeoutSeconds;
            }

            if (watch !== undefined) {
                localVarQueryParameter['watch'] = watch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedPipeline: async (name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedPipeline', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedPipeline', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedPipeline', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus: async (name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedRun: async (name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedRun', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedRun', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedRun', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedRunStatus: async (name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedRunStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedRunStatus', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedRunStatus', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedTask: async (name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedTask', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedTask', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedTask', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus: async (name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * read the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedPipeline: async (name: string, namespace: string, pretty?: string, resourceVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedPipeline', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedPipeline', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * read status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus: async (name: string, namespace: string, pretty?: string, resourceVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * read the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedRun: async (name: string, namespace: string, pretty?: string, resourceVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedRun', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedRun', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * read status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedRunStatus: async (name: string, namespace: string, pretty?: string, resourceVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedRunStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedRunStatus', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * read the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedTask: async (name: string, namespace: string, pretty?: string, resourceVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedTask', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedTask', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * read status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedTaskStatus: async (name: string, namespace: string, pretty?: string, resourceVersion?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('readPipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'namespace', namespace)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (resourceVersion !== undefined) {
                localVarQueryParameter['resourceVersion'] = resourceVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * replace the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedPipeline: async (name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedPipeline', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedPipeline', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedPipeline', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * replace status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus: async (name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/pipelines/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * replace the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedRun: async (name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedRun', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedRun', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedRun', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * replace status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedRunStatus: async (name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedRunStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedRunStatus', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedRunStatus', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/runs/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * replace the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedTask: async (name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedTask', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedTask', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedTask', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * replace status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus: async (name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'name', name)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'namespace', namespace)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus', 'body', body)
            const localVarPath = `/apis/pipeline.1eedaegon.github.io/v1/namespaces/{namespace}/tasks/{name}/status`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerToken required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)

            if (pretty !== undefined) {
                localVarQueryParameter['pretty'] = pretty;
            }

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }

            if (fieldManager !== undefined) {
                localVarQueryParameter['fieldManager'] = fieldManager;
            }

            if (fieldValidation !== undefined) {
                localVarQueryParameter['fieldValidation'] = fieldValidation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Pipeline1eedaegonGithubIoV1Api - functional programming interface
 * @export
 */
export const Pipeline1eedaegonGithubIoV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Pipeline1eedaegonGithubIoV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * create a Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.createPipeline1eedaegonGithubIoV1NamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create a Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPipeline1eedaegonGithubIoV1NamespacedRun(namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPipeline1eedaegonGithubIoV1NamespacedRun(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.createPipeline1eedaegonGithubIoV1NamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create a Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPipeline1eedaegonGithubIoV1NamespacedTask(namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPipeline1eedaegonGithubIoV1NamespacedTask(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.createPipeline1eedaegonGithubIoV1NamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete collection of Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete collection of Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete collection of Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete a Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.deletePipeline1eedaegonGithubIoV1NamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete a Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.deletePipeline1eedaegonGithubIoV1NamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * delete a Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.deletePipeline1eedaegonGithubIoV1NamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list objects of kind Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1PipelineList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.listPipeline1eedaegonGithubIoV1NamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list objects of kind Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPipeline1eedaegonGithubIoV1NamespacedRun(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1RunList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPipeline1eedaegonGithubIoV1NamespacedRun(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.listPipeline1eedaegonGithubIoV1NamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list objects of kind Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPipeline1eedaegonGithubIoV1NamespacedTask(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1TaskList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPipeline1eedaegonGithubIoV1NamespacedTask(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.listPipeline1eedaegonGithubIoV1NamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list objects of kind Pipeline
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1PipelineList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list objects of kind Run
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPipeline1eedaegonGithubIoV1RunForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1RunList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPipeline1eedaegonGithubIoV1RunForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.listPipeline1eedaegonGithubIoV1RunForAllNamespaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * list objects of kind Task
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1TaskList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.listPipeline1eedaegonGithubIoV1TaskForAllNamespaces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * partially update the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.patchPipeline1eedaegonGithubIoV1NamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * partially update status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * partially update the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.patchPipeline1eedaegonGithubIoV1NamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * partially update status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.patchPipeline1eedaegonGithubIoV1NamespacedRunStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * partially update the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.patchPipeline1eedaegonGithubIoV1NamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * partially update status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * read the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, pretty, resourceVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.readPipeline1eedaegonGithubIoV1NamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * read status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, pretty, resourceVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * read the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, pretty, resourceVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.readPipeline1eedaegonGithubIoV1NamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * read status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, pretty, resourceVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.readPipeline1eedaegonGithubIoV1NamespacedRunStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * read the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, pretty, resourceVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.readPipeline1eedaegonGithubIoV1NamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * read status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, pretty, resourceVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.readPipeline1eedaegonGithubIoV1NamespacedTaskStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * replace the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replacePipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.replacePipeline1eedaegonGithubIoV1NamespacedPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * replace status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * replace the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replacePipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.replacePipeline1eedaegonGithubIoV1NamespacedRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * replace status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Run>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.replacePipeline1eedaegonGithubIoV1NamespacedRunStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * replace the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replacePipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.replacePipeline1eedaegonGithubIoV1NamespacedTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * replace status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IoGithub1eedaegonPipelineV1Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Pipeline1eedaegonGithubIoV1Api.replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * Pipeline1eedaegonGithubIoV1Api - factory interface
 * @export
 */
export const Pipeline1eedaegonGithubIoV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Pipeline1eedaegonGithubIoV1ApiFp(configuration)
    return {
        /**
         * create a Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.createPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * create a Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline1eedaegonGithubIoV1NamespacedRun(namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.createPipeline1eedaegonGithubIoV1NamespacedRun(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * create a Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPipeline1eedaegonGithubIoV1NamespacedTask(namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.createPipeline1eedaegonGithubIoV1NamespacedTask(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * delete collection of Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status> {
            return localVarFp.deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * delete collection of Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status> {
            return localVarFp.deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * delete collection of Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status> {
            return localVarFp.deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * delete a Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig): AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status> {
            return localVarFp.deletePipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options).then((request) => request(axios, basePath));
        },
        /**
         * delete a Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig): AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status> {
            return localVarFp.deletePipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options).then((request) => request(axios, basePath));
        },
        /**
         * delete a Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
         * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
         * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
         * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
         * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig): AxiosPromise<IoK8sApimachineryPkgApisMetaV1Status> {
            return localVarFp.deletePipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options).then((request) => request(axios, basePath));
        },
        /**
         * list objects of kind Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1PipelineList> {
            return localVarFp.listPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * list objects of kind Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1NamespacedRun(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1RunList> {
            return localVarFp.listPipeline1eedaegonGithubIoV1NamespacedRun(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * list objects of kind Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1NamespacedTask(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1TaskList> {
            return localVarFp.listPipeline1eedaegonGithubIoV1NamespacedTask(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * list objects of kind Pipeline
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1PipelineList> {
            return localVarFp.listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * list objects of kind Run
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1RunForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1RunList> {
            return localVarFp.listPipeline1eedaegonGithubIoV1RunForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * list objects of kind Task
         * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
         * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
         * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
         * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
         * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
         * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
         * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1TaskList> {
            return localVarFp.listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.patchPipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.patchPipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.patchPipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {object} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(axios, basePath));
        },
        /**
         * read the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.readPipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, pretty, resourceVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * read status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, pretty, resourceVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * read the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.readPipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, pretty, resourceVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * read status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.readPipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, pretty, resourceVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * read the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.readPipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, pretty, resourceVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * read status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, pretty, resourceVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * replace the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.replacePipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * replace status of the specified Pipeline
         * @param {string} name name of the Pipeline
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Pipeline> {
            return localVarFp.replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * replace the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.replacePipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * replace status of the specified Run
         * @param {string} name name of the Run
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Run} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Run> {
            return localVarFp.replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * replace the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.replacePipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
        /**
         * replace status of the specified Task
         * @param {string} name name of the Task
         * @param {string} namespace object name and auth scope, such as for teams and projects
         * @param {IoGithub1eedaegonPipelineV1Task} body 
         * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
         * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
         * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
         * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig): AxiosPromise<IoGithub1eedaegonPipelineV1Task> {
            return localVarFp.replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Pipeline1eedaegonGithubIoV1Api - object-oriented interface
 * @export
 * @class Pipeline1eedaegonGithubIoV1Api
 * @extends {BaseAPI}
 */
export class Pipeline1eedaegonGithubIoV1Api extends BaseAPI {
    /**
     * create a Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public createPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).createPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Run} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public createPipeline1eedaegonGithubIoV1NamespacedRun(namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).createPipeline1eedaegonGithubIoV1NamespacedRun(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Task} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public createPipeline1eedaegonGithubIoV1NamespacedTask(namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).createPipeline1eedaegonGithubIoV1NamespacedTask(namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete collection of Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).deletePipeline1eedaegonGithubIoV1CollectionNamespacedPipeline(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete collection of Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).deletePipeline1eedaegonGithubIoV1CollectionNamespacedRun(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete collection of Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).deletePipeline1eedaegonGithubIoV1CollectionNamespacedTask(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete a Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public deletePipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).deletePipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete a Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public deletePipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).deletePipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete a Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {number} [gracePeriodSeconds] The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {boolean} [ignoreStoreReadErrorWithClusterBreakingPotential] if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     * @param {boolean} [orphanDependents] Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {string} [propagationPolicy] Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param {IoK8sApimachineryPkgApisMetaV1DeleteOptions} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public deletePipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, ignoreStoreReadErrorWithClusterBreakingPotential?: boolean, orphanDependents?: boolean, propagationPolicy?: string, body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).deletePipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, pretty, dryRun, gracePeriodSeconds, ignoreStoreReadErrorWithClusterBreakingPotential, orphanDependents, propagationPolicy, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list objects of kind Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public listPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).listPipeline1eedaegonGithubIoV1NamespacedPipeline(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list objects of kind Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public listPipeline1eedaegonGithubIoV1NamespacedRun(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).listPipeline1eedaegonGithubIoV1NamespacedRun(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list objects of kind Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public listPipeline1eedaegonGithubIoV1NamespacedTask(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).listPipeline1eedaegonGithubIoV1NamespacedTask(namespace, pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list objects of kind Pipeline
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).listPipeline1eedaegonGithubIoV1PipelineForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list objects of kind Run
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public listPipeline1eedaegonGithubIoV1RunForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).listPipeline1eedaegonGithubIoV1RunForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * list objects of kind Task
     * @param {boolean} [allowWatchBookmarks] allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param {string} [_continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param {string} [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {string} [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {number} [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {string} [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {boolean} [sendInitialEvents] &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param {number} [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param {boolean} [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).listPipeline1eedaegonGithubIoV1TaskForAllNamespaces(allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, sendInitialEvents, timeoutSeconds, watch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update the specified Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {object} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public patchPipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).patchPipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update status of the specified Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {object} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).patchPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update the specified Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {object} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public patchPipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).patchPipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update status of the specified Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {object} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).patchPipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update the specified Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {object} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public patchPipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).patchPipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update status of the specified Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {object} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {boolean} [force] Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).patchPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * read the specified Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public readPipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).readPipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, pretty, resourceVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * read status of the specified Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).readPipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, pretty, resourceVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * read the specified Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public readPipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).readPipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, pretty, resourceVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * read status of the specified Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public readPipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).readPipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, pretty, resourceVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * read the specified Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public readPipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).readPipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, pretty, resourceVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * read status of the specified Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).readPipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, pretty, resourceVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * replace the specified Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public replacePipeline1eedaegonGithubIoV1NamespacedPipeline(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).replacePipeline1eedaegonGithubIoV1NamespacedPipeline(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * replace status of the specified Pipeline
     * @param {string} name name of the Pipeline
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Pipeline} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Pipeline, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).replacePipeline1eedaegonGithubIoV1NamespacedPipelineStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * replace the specified Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Run} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public replacePipeline1eedaegonGithubIoV1NamespacedRun(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).replacePipeline1eedaegonGithubIoV1NamespacedRun(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * replace status of the specified Run
     * @param {string} name name of the Run
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Run} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Run, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).replacePipeline1eedaegonGithubIoV1NamespacedRunStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * replace the specified Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Task} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public replacePipeline1eedaegonGithubIoV1NamespacedTask(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).replacePipeline1eedaegonGithubIoV1NamespacedTask(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * replace status of the specified Task
     * @param {string} name name of the Task
     * @param {string} namespace object name and auth scope, such as for teams and projects
     * @param {IoGithub1eedaegonPipelineV1Task} body 
     * @param {string} [pretty] If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param {string} [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param {string} [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param {string} [fieldValidation] fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Pipeline1eedaegonGithubIoV1Api
     */
    public replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(name: string, namespace: string, body: IoGithub1eedaegonPipelineV1Task, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, options?: RawAxiosRequestConfig) {
        return Pipeline1eedaegonGithubIoV1ApiFp(this.configuration).replacePipeline1eedaegonGithubIoV1NamespacedTaskStatus(name, namespace, body, pretty, dryRun, fieldManager, fieldValidation, options).then((request) => request(this.axios, this.basePath));
    }
}



